// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String
  password         String
  subscriptionTier String   @default("free") @map("subscription_tier")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  profile            UserProfile?
  sessions           InterviewSession[]
  practiceSessions   PracticeSession[]
  consents           UserConsent[]
  auditLogs          AuditLog[]
  usagePatterns      UsagePattern[]
  encryptionKeys     EncryptionKey[]
  dataExportRequests DataExportRequest[]
  privacySettings    PrivacySetting?
  integrations       UserIntegration[]
  dataExports        DataExport[]
  webhookEndpoints   WebhookEndpoint[]
  calendarEvents     CalendarEvent[]
  videoMeetings      VideoMeeting[]

  @@map("users")
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  seniority   String?
  industries  Json?
  skills      Json?
  experience  Json?
  preferences Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model InterviewSession {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  jobContext Json?     @map("job_context")
  status     String    @default("active")
  settings   Json?
  startedAt  DateTime  @default(now()) @map("started_at")
  endedAt    DateTime? @map("ended_at")
  createdAt  DateTime  @default(now()) @map("created_at")

  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  interactions         Interaction[]
  metrics              SessionMetrics[]
  transcriptionResults TranscriptionResult[]
  audioChunks          AudioChunk[]
  auditLogs            AuditLog[]

  @@map("interview_sessions")
}

model Interaction {
  id                     String   @id @default(cuid())
  sessionId              String   @map("session_id")
  question               String
  questionClassification Json?    @map("question_classification")
  generatedResponses     Json?    @map("generated_responses")
  selectedResponse       String?  @map("selected_response")
  userFeedback          Int?     @map("user_feedback")
  timestamp              DateTime @default(now())

  session              InterviewSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  transcriptionResults TranscriptionResult[]

  @@map("interactions")
}

model SessionMetrics {
  id                      String   @id @default(cuid())
  sessionId               String   @map("session_id")
  transcriptionLatencyMs  Int?     @map("transcription_latency_ms")
  responseGenerationMs    Int?     @map("response_generation_ms")
  totalLatencyMs          Int?     @map("total_latency_ms")
  transcriptionAccuracy   Decimal? @map("transcription_accuracy") @db.Decimal(5, 2)
  userSatisfaction        Int?     @map("user_satisfaction")
  createdAt               DateTime @default(now()) @map("created_at")

  session InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("session_metrics")
}

model TranscriptionResult {
  id                String   @id @default(cuid())
  sessionId         String   @map("session_id")
  interactionId     String?  @map("interaction_id")
  audioChunkId      String   @map("audio_chunk_id")
  text              String
  confidence        Decimal  @db.Decimal(5, 4)
  isFinal           Boolean  @default(false) @map("is_final")
  provider          String   // 'google' | 'whisper'
  language          String   @default("en-US")
  speakerId         String?  @map("speaker_id")
  startTime         Decimal? @map("start_time") @db.Decimal(10, 3)
  endTime           Decimal? @map("end_time") @db.Decimal(10, 3)
  alternatives      Json?    // Alternative transcriptions
  metadata          Json?    // Additional provider-specific data
  createdAt         DateTime @default(now()) @map("created_at")

  session     InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  interaction Interaction?     @relation(fields: [interactionId], references: [id], onDelete: SetNull)

  @@index([sessionId, createdAt])
  @@index([audioChunkId])
  @@map("transcription_results")
}

model AudioChunk {
  id            String   @id @default(cuid())
  sessionId     String   @map("session_id")
  chunkIndex    Int      @map("chunk_index")
  audioData     Bytes?   @map("audio_data") // Store small chunks temporarily
  audioUrl      String?  @map("audio_url")  // URL for larger files
  format        String   @default("webm")
  sampleRate    Int      @default(16000) @map("sample_rate")
  channels      Int      @default(1)
  duration      Decimal? @db.Decimal(10, 3)
  size          Int?     // Size in bytes
  checksum      String?  // For integrity verification
  processedAt   DateTime? @map("processed_at")
  createdAt     DateTime @default(now()) @map("created_at")

  session InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, chunkIndex])
  @@map("audio_chunks")
}

model TranscriptionCache {
  id          String   @id @default(cuid())
  audioHash   String   @unique @map("audio_hash") // Hash of audio content
  text        String
  confidence  Decimal  @db.Decimal(5, 4)
  provider    String
  language    String   @default("en-US")
  metadata    Json?
  hitCount    Int      @default(1) @map("hit_count")
  lastUsed    DateTime @default(now()) @map("last_used")
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([audioHash])
  @@index([lastUsed])
  @@map("transcription_cache")
}

model PracticeSession {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  jobTitle        String    @map("job_title")
  industry        String
  difficulty      String    // 'junior' | 'mid' | 'senior'
  questionTypes   Json      @map("question_types") // Array of question types
  questionCount   Int       @map("question_count")
  status          String    @default("active") // 'active' | 'completed' | 'abandoned'
  startedAt       DateTime  @default(now()) @map("started_at")
  completedAt     DateTime? @map("completed_at")
  duration        Int?      // Duration in minutes
  averageScore    Decimal?  @map("average_score") @db.Decimal(4, 2)
  createdAt       DateTime  @default(now()) @map("created_at")

  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions         PracticeQuestion[]
  responses         PracticeResponse[]
  analytics         PracticeAnalytics[]

  @@index([userId, createdAt])
  @@map("practice_sessions")
}

model QuestionBank {
  id              String   @id @default(cuid())
  question        String
  type            String   // 'technical' | 'behavioral' | 'situational' | 'cultural'
  category        String
  industry        String
  difficulty      String   // 'junior' | 'mid' | 'senior'
  expectedStructure String? @map("expected_structure")
  keyPoints       Json?    @map("key_points") // Array of key points
  timeLimit       Int?     @map("time_limit") // Time limit in seconds
  tags            Json?    // Array of tags
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  practiceQuestions PracticeQuestion[]

  @@index([type, industry, difficulty])
  @@index([category, isActive])
  @@map("question_bank")
}

model PracticeQuestion {
  id              String   @id @default(cuid())
  sessionId       String   @map("session_id")
  questionBankId  String   @map("question_bank_id")
  questionOrder   Int      @map("question_order")
  presentedAt     DateTime @default(now()) @map("presented_at")
  answeredAt      DateTime? @map("answered_at")

  session       PracticeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionBank  QuestionBank    @relation(fields: [questionBankId], references: [id])
  response      PracticeResponse?

  @@index([sessionId, questionOrder])
  @@map("practice_questions")
}

model PracticeResponse {
  id                  String   @id @default(cuid())
  sessionId           String   @map("session_id")
  questionId          String   @unique @map("question_id")
  response            String
  duration            Int      // Duration in seconds
  usedAISuggestions   Boolean  @default(false) @map("used_ai_suggestions")
  overallScore        Decimal? @map("overall_score") @db.Decimal(4, 2)
  contentScore        Decimal? @map("content_score") @db.Decimal(4, 2)
  structureScore      Decimal? @map("structure_score") @db.Decimal(4, 2)
  clarityScore        Decimal? @map("clarity_score") @db.Decimal(4, 2)
  feedback            String?
  strengths           Json?    // Array of strengths
  improvements        Json?    // Array of improvements
  suggestions         Json?    // Array of suggestions
  createdAt           DateTime @default(now()) @map("created_at")

  session   PracticeSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question  PracticeQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@map("practice_responses")
}

model PracticeAnalytics {
  id                    String   @id @default(cuid())
  sessionId             String   @map("session_id")
  userId                String   @map("user_id")
  totalQuestions        Int      @map("total_questions")
  questionsAnswered     Int      @map("questions_answered")
  averageResponseTime   Int?     @map("average_response_time") // In seconds
  averageScore          Decimal? @map("average_score") @db.Decimal(4, 2)
  strongestAreas        Json?    @map("strongest_areas") // Array of areas
  improvementAreas      Json?    @map("improvement_areas") // Array of areas
  progressMetrics       Json?    @map("progress_metrics") // Custom metrics
  createdAt             DateTime @default(now()) @map("created_at")

  session PracticeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("practice_analytics")
}

// Security and Privacy Models

model UserConsent {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  consentType String    @map("consent_type") // 'audio_processing', 'data_storage', 'analytics', 'marketing'
  granted     Boolean   @default(false)
  grantedAt   DateTime? @map("granted_at")
  revokedAt   DateTime? @map("revoked_at")
  ipAddress   String?   @map("ip_address")
  userAgent   String?   @map("user_agent")
  version     String    // Version of privacy policy/terms
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, consentType, version])
  @@index([userId])
  @@index([consentType])
  @@map("user_consents")
}

model DataRetentionPolicy {
  id            String   @id @default(cuid())
  dataType      String   @map("data_type") // 'audio', 'transcription', 'session', 'analytics'
  retentionDays Int      @map("retention_days")
  autoDelete    Boolean  @default(true) @map("auto_delete")
  description   String?
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("data_retention_policies")
}

model AuditLog {
  id           String    @id @default(cuid())
  userId       String?   @map("user_id")
  sessionId    String?   @map("session_id")
  action       String    // 'login', 'audio_capture', 'transcription', 'response_generation', 'data_export', 'data_delete'
  resourceType String?   @map("resource_type") // 'user', 'session', 'audio', 'transcription'
  resourceId   String?   @map("resource_id")
  details      Json?
  ipAddress    String?   @map("ip_address")
  userAgent    String?   @map("user_agent")
  success      Boolean   @default(true)
  errorMessage String?   @map("error_message")
  createdAt    DateTime  @default(now()) @map("created_at")

  user    User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  session InterviewSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model UsagePattern {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  patternType    String    @map("pattern_type") // 'session_frequency', 'audio_volume', 'api_usage', 'suspicious_activity'
  patternData    Json      @map("pattern_data")
  riskScore      Decimal   @default(0.00) @map("risk_score") @db.Decimal(5, 2)
  flagged        Boolean   @default(false)
  flaggedReason  String?   @map("flagged_reason")
  reviewed       Boolean   @default(false)
  reviewedBy     String?   @map("reviewed_by")
  reviewedAt     DateTime? @map("reviewed_at")
  createdAt      DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([flagged])
  @@map("usage_patterns")
}

model EncryptionKey {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  keyType   String    @map("key_type") // 'audio', 'transcription', 'profile'
  keyHash   String    @map("key_hash") // Hashed version of the key
  salt      String
  algorithm String    @default("AES-256-GCM")
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime? @map("expires_at")
  isActive  Boolean   @default(true) @map("is_active")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, keyType])
  @@index([userId])
  @@map("encryption_keys")
}

model DataExportRequest {
  id                  String    @id @default(cuid())
  userId              String    @map("user_id")
  requestType         String    @map("request_type") // 'export', 'delete'
  status              String    @default("pending") // 'pending', 'processing', 'completed', 'failed'
  requestedDataTypes  Json?     @map("requested_data_types") // Array of data types requested
  exportUrl           String?   @map("export_url")
  expiresAt           DateTime? @map("expires_at")
  completedAt         DateTime? @map("completed_at")
  errorMessage        String?   @map("error_message")
  createdAt           DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("data_export_requests")
}

model PrivacySetting {
  id                        String   @id @default(cuid())
  userId                    String   @unique @map("user_id")
  audioRetentionDays        Int      @default(30) @map("audio_retention_days")
  transcriptionRetentionDays Int     @default(90) @map("transcription_retention_days")
  analyticsEnabled          Boolean  @default(true) @map("analytics_enabled")
  dataSharingEnabled        Boolean  @default(false) @map("data_sharing_enabled")
  marketingEmailsEnabled    Boolean  @default(false) @map("marketing_emails_enabled")
  sessionRecordingEnabled   Boolean  @default(true) @map("session_recording_enabled")
  aiTrainingConsent         Boolean  @default(false) @map("ai_training_consent")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("privacy_settings")
}
// 
External Integrations Models

enum IntegrationType {
  LINKEDIN
  GOOGLE_CALENDAR
  OUTLOOK_CALENDAR
  ZOOM
  TEAMS
  GOOGLE_MEET
}

enum WebhookEvent {
  SESSION_STARTED
  SESSION_COMPLETED
  SESSION_PAUSED
  TRANSCRIPTION_COMPLETED
  RESPONSE_GENERATED
  PRACTICE_COMPLETED
  INTEGRATION_CONNECTED
  INTEGRATION_DISCONNECTED
  EXPORT_COMPLETED
  USER_PROFILE_UPDATED
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}

enum WebhookDeliveryStatus {
  PENDING
  DELIVERED
  FAILED
  RETRYING
}

model UserIntegration {
  id               String          @id @default(cuid())
  userId           String          @map("user_id")
  integrationType  IntegrationType @map("integration_type")
  providerUserId   String?         @map("provider_user_id")
  accessToken      String          @map("access_token")
  refreshToken     String?         @map("refresh_token")
  expiresAt        DateTime?       @map("expires_at")
  scopes           String[]
  isActive         Boolean         @default(true) @map("is_active")
  lastSync         DateTime?       @map("last_sync")
  syncData         Json?           @map("sync_data")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendarEvents CalendarEvent[]
  videoMeetings  VideoMeeting[]

  @@unique([userId, integrationType])
  @@index([userId])
  @@index([integrationType])
  @@map("user_integrations")
}

model DataExport {
  id             String       @id @default(cuid())
  userId         String       @map("user_id")
  exportFormat   String       @map("export_format")
  dataTypes      String[]     @map("data_types")
  includeOptions Json?        @map("include_options")
  status         ExportStatus @default(PENDING)
  filePath       String?      @map("file_path")
  fileSize       Int?         @map("file_size")
  downloadUrl    String?      @map("download_url")
  expiresAt      DateTime?    @map("expires_at")
  errorMessage   String?      @map("error_message")
  createdAt      DateTime     @default(now()) @map("created_at")
  completedAt    DateTime?    @map("completed_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@map("data_exports")
}

model WebhookEndpoint {
  id            String        @id @default(cuid())
  userId        String        @map("user_id")
  url           String
  events        WebhookEvent[]
  secret        String
  isActive      Boolean       @default(true) @map("is_active")
  failureCount  Int           @default(0) @map("failure_count")
  maxRetries    Int           @default(3) @map("max_retries")
  lastTriggered DateTime?     @map("last_triggered")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveries WebhookDelivery[]

  @@index([userId])
  @@index([isActive])
  @@map("webhook_endpoints")
}

model WebhookDelivery {
  id             String                @id @default(cuid())
  webhookId      String                @map("webhook_id")
  event          WebhookEvent
  payload        Json
  status         WebhookDeliveryStatus @default(PENDING)
  attempts       Int                   @default(0)
  lastAttempt    DateTime?             @map("last_attempt")
  nextRetry      DateTime?             @map("next_retry")
  responseStatus Int?                  @map("response_status")
  responseBody   String?               @map("response_body")
  errorMessage   String?               @map("error_message")
  createdAt      DateTime              @default(now()) @map("created_at")

  webhook WebhookEndpoint @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([status])
  @@index([nextRetry])
  @@map("webhook_deliveries")
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  userId              String   @map("user_id")
  integrationId       String   @map("integration_id")
  externalId          String   @map("external_id")
  title               String
  description         String?
  startTime           DateTime @map("start_time")
  endTime             DateTime @map("end_time")
  attendees           String[]
  location            String?
  meetingUrl          String?  @map("meeting_url")
  isInterviewRelated  Boolean  @default(false) @map("is_interview_related")
  companyName         String?  @map("company_name")
  jobTitle            String?  @map("job_title")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  integration UserIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, externalId])
  @@index([userId])
  @@index([integrationId])
  @@index([startTime])
  @@index([isInterviewRelated])
  @@map("calendar_events")
}

model VideoMeeting {
  id                  String   @id @default(cuid())
  userId              String   @map("user_id")
  integrationId       String   @map("integration_id")
  externalId          String   @map("external_id")
  title               String
  startTime           DateTime @map("start_time")
  duration            Int      // Duration in minutes
  joinUrl             String   @map("join_url")
  hostId              String?  @map("host_id")
  platform            String
  isRecorded          Boolean? @map("is_recorded")
  recordingUrl        String?  @map("recording_url")
  participants        Json?
  isInterviewRelated  Boolean  @default(false) @map("is_interview_related")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  integration UserIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, externalId])
  @@index([userId])
  @@index([integrationId])
  @@index([startTime])
  @@index([isInterviewRelated])
  @@map("video_meetings")
}